import java.util.regex.Matcher
import java.util.regex.Pattern

/*
 * Copyright (c) 2019 Telekom Deutschland AG
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

bintray {
    user = 'grauralex'
    key = '645d5e7bd7748da2a31a074e68e422604463b262'
    publications = ['testMaven']
    pkg {
        repo = 'maven'
        name = 'awesome-quotes'
        userOrg = 'grauralex'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/en-agraur/awesome-quotes.git'
        publish = true
        version {
            name = '3.3.3'
            desc = 'test build'
            vcsTag = '1.0.0'
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = 'sources'
    include("**")
}

publishing {
    group = 'com.agraur.awesomequotes'
    version = rootProject.ext.androidVersionName
    publications {
        testMaven(MavenPublication) {
            groupId project.getGroup()
            artifactId project.getName()
            version = project.getVersion()

            String aarFileName = "$buildDir/outputs/aar/${project.name}-release-${version}.aar"
            if (new File(aarFileName).exists()) {
                artifact(aarFileName)
                artifact sourcesJar
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                    if (getCurrentFlavor() == 'debug') {
                        configurations.debugImplementation.allDependencies.each {
                            if (it.name != 'unspecified') {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                    }
                    if (getCurrentFlavor() == 'release') {
                        configurations.releaseImplementation.allDependencies.each {
                            if (it.name != 'unspecified') {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                    }
                }
            }
        }
    }
}

def getCurrentFlavor() {
    String tskReqStr = getGradle().getStartParameter().getTaskRequests().toString()

    Pattern pattern

    if (tskReqStr.contains("assemble"))
        pattern = Pattern.compile("assemble(\\w+)")
    else
        pattern = Pattern.compile("generate(\\w+)")

    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find())
        return matcher.group(1).toLowerCase()
    else {
        println "NO MATCH FOUND"
        return ""
    }
}